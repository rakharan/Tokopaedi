// @generated by protobuf-ts 2.11.0 with parameter client_grpc1,server_grpc1
// @generated from protobuf file "product_catalog.proto" (package "product_catalog", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message product_catalog.Product
 */
export interface Product {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3
     */
    description: string;
    /**
     * @generated from protobuf field: double price = 4
     */
    price: number;
    /**
     * @generated from protobuf field: int32 stock_quantity = 5
     */
    stockQuantity: number;
    /**
     * @generated from protobuf field: string category = 6
     */
    category: string; // Mapping 'pc.name' from your SQL
    /**
     * @generated from protobuf field: double rating = 7
     */
    rating: number;
    /**
     * @generated from protobuf field: int32 review_count = 8
     */
    reviewCount: number;
    /**
     * @generated from protobuf field: repeated string image_urls = 9
     */
    imageUrls: string[]; // GROUP_CONCAT(pg.img_src)
    /**
     * @generated from protobuf field: repeated string public_ids = 10
     */
    publicIds: string[]; // GROUP_CONCAT(pg.public_id)
}
/**
 * @generated from protobuf message product_catalog.PaginationRequest
 */
export interface PaginationRequest {
    /**
     * @generated from protobuf field: int32 limit = 1
     */
    limit: number;
    /**
     * @generated from protobuf field: string sort = 2
     */
    sort: string; // "ASC" or "DESC"
    /**
     * @generated from protobuf field: int32 last_id = 3
     */
    lastId: number; // For primary key-based pagination
    /**
     * Additional fields for cursor-based pagination if needed, e.g.:
     *
     * @generated from protobuf field: double last_price = 4
     */
    lastPrice: number;
    /**
     * @generated from protobuf field: double last_rating = 5
     */
    lastRating: number;
}
/**
 * @generated from protobuf message product_catalog.ProductListSearchFilter
 */
export interface ProductListSearchFilter {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string; // From your `search: { name: "string" }`
    /**
     * @generated from protobuf field: string single_category = 2
     */
    singleCategory: string; // From your `search: { single_category: "string" }`
}
/**
 * @generated from protobuf message product_catalog.GetProductListRequest
 */
export interface GetProductListRequest {
    /**
     * Common pagination parameters
     *
     * @generated from protobuf field: product_catalog.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * Search filter
     *
     * @generated from protobuf field: product_catalog.ProductListSearchFilter search_filter = 2
     */
    searchFilter?: ProductListSearchFilter;
    /**
     * Additional body filters
     *
     * @generated from protobuf field: product_catalog.SortFilterOption sort_filter = 3
     */
    sortFilter: SortFilterOption;
    /**
     * @generated from protobuf field: string categories_filter = 4
     */
    categoriesFilter: string; // From your `categoriesFilter: { type: "string" }`
    /**
     * @generated from protobuf field: product_catalog.RatingSortOption rating_sort = 5
     */
    ratingSort: RatingSortOption;
    /**
     * @generated from protobuf field: double price_min = 6
     */
    priceMin: number;
    /**
     * @generated from protobuf field: double price_max = 7
     */
    priceMax: number;
}
/**
 * @generated from protobuf message product_catalog.GetProductListResponse
 */
export interface GetProductListResponse {
    /**
     * @generated from protobuf field: repeated product_catalog.Product products = 1
     */
    products: Product[];
    /**
     * @generated from protobuf field: string next_page_token = 2
     */
    nextPageToken: string; // Or derive from `last_id`, `last_price`, `last_rating`
    /**
     * @generated from protobuf field: bool has_more = 3
     */
    hasMore: boolean; // From your Paginate utility
    /**
     * @generated from protobuf field: int32 total_count = 4
     */
    totalCount: number; // If you want total count, might require a separate query
}
/**
 * @generated from protobuf enum product_catalog.SortFilterOption
 */
export enum SortFilterOption {
    /**
     * Default or no specific sort filter
     *
     * @generated from protobuf enum value: SORT_FILTER_UNSPECIFIED = 0;
     */
    SORT_FILTER_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: MOST_REVIEWED = 1;
     */
    MOST_REVIEWED = 1,
    /**
     * @generated from protobuf enum value: HIGHEST_PRICE = 2;
     */
    HIGHEST_PRICE = 2,
    /**
     * @generated from protobuf enum value: LOWEST_PRICE = 3;
     */
    LOWEST_PRICE = 3,
    /**
     * @generated from protobuf enum value: LOWEST_RATING = 4;
     */
    LOWEST_RATING = 4,
    /**
     * @generated from protobuf enum value: HIGHEST_RATING = 5;
     */
    HIGHEST_RATING = 5
}
/**
 * @generated from protobuf enum product_catalog.RatingSortOption
 */
export enum RatingSortOption {
    /**
     * Default or no specific rating sort
     *
     * @generated from protobuf enum value: RATING_SORT_UNSPECIFIED = 0;
     */
    RATING_SORT_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: GREATER_THAN_OR_EQUAL_FOUR = 1;
     */
    GREATER_THAN_OR_EQUAL_FOUR = 1,
    /**
     * @generated from protobuf enum value: GREATER_THAN_OR_EQUAL_THREE = 2;
     */
    GREATER_THAN_OR_EQUAL_THREE = 2,
    /**
     * @generated from protobuf enum value: GREATER_THAN_OR_EQUAL_TWO = 3;
     */
    GREATER_THAN_OR_EQUAL_TWO = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Product$Type extends MessageType<Product> {
    constructor() {
        super("product_catalog.Product", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "stock_quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "category", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "rating", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "review_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "image_urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "public_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Product>): Product {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.price = 0;
        message.stockQuantity = 0;
        message.category = "";
        message.rating = 0;
        message.reviewCount = 0;
        message.imageUrls = [];
        message.publicIds = [];
        if (value !== undefined)
            reflectionMergePartial<Product>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Product): Product {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* double price */ 4:
                    message.price = reader.double();
                    break;
                case /* int32 stock_quantity */ 5:
                    message.stockQuantity = reader.int32();
                    break;
                case /* string category */ 6:
                    message.category = reader.string();
                    break;
                case /* double rating */ 7:
                    message.rating = reader.double();
                    break;
                case /* int32 review_count */ 8:
                    message.reviewCount = reader.int32();
                    break;
                case /* repeated string image_urls */ 9:
                    message.imageUrls.push(reader.string());
                    break;
                case /* repeated string public_ids */ 10:
                    message.publicIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Product, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* double price = 4; */
        if (message.price !== 0)
            writer.tag(4, WireType.Bit64).double(message.price);
        /* int32 stock_quantity = 5; */
        if (message.stockQuantity !== 0)
            writer.tag(5, WireType.Varint).int32(message.stockQuantity);
        /* string category = 6; */
        if (message.category !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.category);
        /* double rating = 7; */
        if (message.rating !== 0)
            writer.tag(7, WireType.Bit64).double(message.rating);
        /* int32 review_count = 8; */
        if (message.reviewCount !== 0)
            writer.tag(8, WireType.Varint).int32(message.reviewCount);
        /* repeated string image_urls = 9; */
        for (let i = 0; i < message.imageUrls.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.imageUrls[i]);
        /* repeated string public_ids = 10; */
        for (let i = 0; i < message.publicIds.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.publicIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product_catalog.Product
 */
export const Product = new Product$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaginationRequest$Type extends MessageType<PaginationRequest> {
    constructor() {
        super("product_catalog.PaginationRequest", [
            { no: 1, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "sort", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "last_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "last_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "last_rating", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<PaginationRequest>): PaginationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limit = 0;
        message.sort = "";
        message.lastId = 0;
        message.lastPrice = 0;
        message.lastRating = 0;
        if (value !== undefined)
            reflectionMergePartial<PaginationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaginationRequest): PaginationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 limit */ 1:
                    message.limit = reader.int32();
                    break;
                case /* string sort */ 2:
                    message.sort = reader.string();
                    break;
                case /* int32 last_id */ 3:
                    message.lastId = reader.int32();
                    break;
                case /* double last_price */ 4:
                    message.lastPrice = reader.double();
                    break;
                case /* double last_rating */ 5:
                    message.lastRating = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaginationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 limit = 1; */
        if (message.limit !== 0)
            writer.tag(1, WireType.Varint).int32(message.limit);
        /* string sort = 2; */
        if (message.sort !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sort);
        /* int32 last_id = 3; */
        if (message.lastId !== 0)
            writer.tag(3, WireType.Varint).int32(message.lastId);
        /* double last_price = 4; */
        if (message.lastPrice !== 0)
            writer.tag(4, WireType.Bit64).double(message.lastPrice);
        /* double last_rating = 5; */
        if (message.lastRating !== 0)
            writer.tag(5, WireType.Bit64).double(message.lastRating);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product_catalog.PaginationRequest
 */
export const PaginationRequest = new PaginationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductListSearchFilter$Type extends MessageType<ProductListSearchFilter> {
    constructor() {
        super("product_catalog.ProductListSearchFilter", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "single_category", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProductListSearchFilter>): ProductListSearchFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.singleCategory = "";
        if (value !== undefined)
            reflectionMergePartial<ProductListSearchFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductListSearchFilter): ProductListSearchFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string single_category */ 2:
                    message.singleCategory = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductListSearchFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string single_category = 2; */
        if (message.singleCategory !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.singleCategory);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product_catalog.ProductListSearchFilter
 */
export const ProductListSearchFilter = new ProductListSearchFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProductListRequest$Type extends MessageType<GetProductListRequest> {
    constructor() {
        super("product_catalog.GetProductListRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest },
            { no: 2, name: "search_filter", kind: "message", T: () => ProductListSearchFilter },
            { no: 3, name: "sort_filter", kind: "enum", T: () => ["product_catalog.SortFilterOption", SortFilterOption] },
            { no: 4, name: "categories_filter", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "rating_sort", kind: "enum", T: () => ["product_catalog.RatingSortOption", RatingSortOption] },
            { no: 6, name: "price_min", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "price_max", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<GetProductListRequest>): GetProductListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sortFilter = 0;
        message.categoriesFilter = "";
        message.ratingSort = 0;
        message.priceMin = 0;
        message.priceMax = 0;
        if (value !== undefined)
            reflectionMergePartial<GetProductListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProductListRequest): GetProductListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* product_catalog.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* product_catalog.ProductListSearchFilter search_filter */ 2:
                    message.searchFilter = ProductListSearchFilter.internalBinaryRead(reader, reader.uint32(), options, message.searchFilter);
                    break;
                case /* product_catalog.SortFilterOption sort_filter */ 3:
                    message.sortFilter = reader.int32();
                    break;
                case /* string categories_filter */ 4:
                    message.categoriesFilter = reader.string();
                    break;
                case /* product_catalog.RatingSortOption rating_sort */ 5:
                    message.ratingSort = reader.int32();
                    break;
                case /* double price_min */ 6:
                    message.priceMin = reader.double();
                    break;
                case /* double price_max */ 7:
                    message.priceMax = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProductListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* product_catalog.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* product_catalog.ProductListSearchFilter search_filter = 2; */
        if (message.searchFilter)
            ProductListSearchFilter.internalBinaryWrite(message.searchFilter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* product_catalog.SortFilterOption sort_filter = 3; */
        if (message.sortFilter !== 0)
            writer.tag(3, WireType.Varint).int32(message.sortFilter);
        /* string categories_filter = 4; */
        if (message.categoriesFilter !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.categoriesFilter);
        /* product_catalog.RatingSortOption rating_sort = 5; */
        if (message.ratingSort !== 0)
            writer.tag(5, WireType.Varint).int32(message.ratingSort);
        /* double price_min = 6; */
        if (message.priceMin !== 0)
            writer.tag(6, WireType.Bit64).double(message.priceMin);
        /* double price_max = 7; */
        if (message.priceMax !== 0)
            writer.tag(7, WireType.Bit64).double(message.priceMax);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product_catalog.GetProductListRequest
 */
export const GetProductListRequest = new GetProductListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProductListResponse$Type extends MessageType<GetProductListResponse> {
    constructor() {
        super("product_catalog.GetProductListResponse", [
            { no: 1, name: "products", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Product },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "has_more", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "total_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetProductListResponse>): GetProductListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.products = [];
        message.nextPageToken = "";
        message.hasMore = false;
        message.totalCount = 0;
        if (value !== undefined)
            reflectionMergePartial<GetProductListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProductListResponse): GetProductListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated product_catalog.Product products */ 1:
                    message.products.push(Product.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                case /* bool has_more */ 3:
                    message.hasMore = reader.bool();
                    break;
                case /* int32 total_count */ 4:
                    message.totalCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProductListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated product_catalog.Product products = 1; */
        for (let i = 0; i < message.products.length; i++)
            Product.internalBinaryWrite(message.products[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        /* bool has_more = 3; */
        if (message.hasMore !== false)
            writer.tag(3, WireType.Varint).bool(message.hasMore);
        /* int32 total_count = 4; */
        if (message.totalCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product_catalog.GetProductListResponse
 */
export const GetProductListResponse = new GetProductListResponse$Type();
/**
 * @generated ServiceType for protobuf service product_catalog.ProductCatalogService
 */
export const ProductCatalogService = new ServiceType("product_catalog.ProductCatalogService", [
    { name: "GetProductList", options: {}, I: GetProductListRequest, O: GetProductListResponse }
]);
